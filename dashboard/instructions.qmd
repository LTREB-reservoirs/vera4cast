---
title: "How to forecast"
number-sections: true
editor: 
  markdown: 
    wrap: sentence
---

## tl;dr: How to submit a forecast

We provide an overview of the steps for submitting with the details below:

1)  Register at <https://forms.gle/kg2Vkpho9BoMXSy57>. You are not required to register if your forecast submission uses the word "example" in your model_id". Any forecasts with "example" in the model_id will not be used in forecast evaluation analyses.
2)  Generate a forecast!
3)  Write the forecast output to a file that follows our standardized format (described below).
4)  Submit your forecast using an R function (provided below).
5)  Watch your forecast be evaluated as new data are collected. 

## Generating a forecast

### All forecasting approaches are welcome

We encourage you to use any modeling approach to make a prediction about the future conditions at the two LTREB reservoirs or the stream that connects them.  

### Must include uncertainty

Forecasts require you to make an assessment of the confidence in your prediction of the future. You can represent your confidence (i.e., uncertainty in the forecast) using a distribution or numerically using an ensemble (or sample) of predictions. 

### Any model drivers/covariates/features are welcome

You can use any data as model inputs (including all of the forecast target data available to date). All sensor-based target data are available in near-real time (1-day latency). You may want to use the updated target data to re-train a model or for use in data assimilation.

As VERA is a genuine forecasting challenge, you will need forecasted drivers if your model uses drivers as inputs. If you are interested in using forecasted meteorology for the VERA sites, we have developed an R package ([https://github.com/FLARE-forecast/RopenMeteo](https://github.com/FLARE-forecast/RopenMeteo)) that can be used to access ensemble weather forecasts or seasonal forecasts for the sites. The R package is a wrapper around the open-meteo.com API. The README in the R package repo provides instructions for use.

### Forecasts can be for a range of horizons

Forecasts can be submitted at the daily time step for 1 day to 10 years ahead into the future.

### Forecasts can be submitted everyday

Since forecasts can be submitted every day, automation is important. We provide an example GitHub repository that can be used to automate your forecast with GitHub Actions. It also includes the use of a custom Docker Container [rqthomas/vera4cast:latest](https://github.com/LTREB-reservoirs/vera4cast/blob/main/Dockerfile) that has many of the R packages and functions needed to generate and submit forecasts. 

## Forecast file format

The file is a csv format with the following columns:

-   `project_id`: use `vera4cast`

-   `model_id`: the short name of the model defined as the model_id in the file name (see below) and in your registration.
    The model_id should have no spaces.
    model_id should reflect a method to forecast one or a set of target variables and must be unique to the vera4cast Challenge

-   `datetime`: forecast timestamp.
    Format `%Y-%m-%d %H:%M:%S` with UTC as the time zone.
    Forecasts submitted with a `%Y-%m-%d` format will be converted to a full datetime assuming UTC mid-night.

-   `reference_datetime`: The start of the forecast; this should be 0 times steps in the future.
    There should only be one value of `reference_datetime` in the file.
    Format is `%Y-%m-%d %H:%M:%S` with UTC as the time zone.
    Forecasts submitted with a `%Y-%m-%d` format will be converted to a full datetime assuming UTC mid-night.

-   `duration`: the time-step of the forecast.
    Use the value of `P1D` for a daily forecast and `PT1H` for an hourly forecast.
    This value should match the duration of the target variable that you are forecasting.
    Formatted as [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)

-   `site_id`: code for site (`bvre`, `fcre`, or `tubr`)

-   `depth_m`: the depth (meters) for the forecasted variable.
    Use `NA` for variables without a specified depth.

-   `family` name of the probability distribution that is described by the parameter values in the parameter column (see list below for accepted distribution).
    An ensemble forecast as a family of `ensemble`.
    See note below about family

-   `parameter` the parameters for the distribution (see note below about parameter column) or the number of the ensemble member.
    For example the parameters for normal are `mu` and `sigma`.

-   `variable`: standardized variable name

-   `prediction`: forecasted value for the parameter in the parameter column

## Representing uncertainity 

Uncertainty is represented through the family - parameter columns

#### Parameteric forecast

For a parametric forecast with the normal distribution, the `family` column uses the word `normal` to designate a normal distribution and the parameter column must have values of `mu` and `sigma` for each forecasted variable, site_id, depth and time combination.

Parameteric forecasts for binary variables should use `bernoulli` as the distribution.

The following names and parameterization of the distribution are supported (family: parameters):

-   `lognormal`: `mu`, `sigma`
-   `normal`: `mu`,`sigma`
-   `bernoulli`: `prob`
-   `beta`: `shape1`, `shape2`
-   `uniform`: `min`, `max`
-   `gamma`: `shape`, `rate`
-   `logistic`: `location`, `scale`
-   `exponential`: `rate`
-   `poisson`: `lambda`

If you are submitting a forecast that is not in the supported list we recommend using the ensemble format and sampling from your distribution to generate a set of ensemble members that represents your distribution. 

#### Ensemble (or sample) forecast

Ensemble (or sample) forecasts use the `family` value of `ensemble` and the `parameter` values are the ensemble index.  

When forecasts using the ensemble family are scored, we assume that the ensemble is a set of equally likely realizations that are sampled from a distribution is comparable to that of the observations (i.e., no broad adjustments are required to make the ensemble more consistent with observations). This is referred to as a "perfect ensemble" in Br√∂cker and Smith (2007). Ensemble (or sample) forecasts are transformed to a probability distribution function (e.g., dressed) using the default methods in the `scoringRules` R package (empirical version of the quantile decomposition for the `crps` and kernel density estimation using a Gaussian kernel for the `logs`). Kernel density estimation uses the default bandwidth produced by the `bw.nrd` function in the R `stats` package.

### Example forecasts

Here is an example of a forecast that uses a normal distribution:

```{r}
df <- readr::read_csv("https://renc.osn.xsede.org/bio230121-bucket01/vera4cast/forecasts/raw/T20231001231345_daily-2023-10-01-climatology.csv.gz", show_col_types = FALSE)
dplyr::glimpse(df)
```

For an ensemble (or sample) forecast, the `family` column uses the word `ensemble` to designate that it is a ensemble forecast and the parameter column is the ensemble member number (`1`, `2`, `3` ...)

```{r}
df <- readr::read_csv("https://renc.osn.xsede.org/bio230121-bucket01/vera4cast/forecasts/raw/T20231001231348_daily-2023-10-01-persistenceRW.csv.gz", show_col_types = FALSE)
dplyr::glimpse(df)
```

## Submission process

Individual forecast files can be uploaded any time.

Teams will submit their forecast csv files through an R function.

The function is available using the following code

```{r eval = FALSE}
remotes::install_github("LTREB-reservoirs/vera4castHelpers")
```

The submit function is

```{r eval = FALSE}
library(vera4castHelpers)
submit(forecast_file = "your_file.csv")
```

If you will be submitting multiple forecasts using the same model_id, use the following

```{r eval = FALSE}
vera4castHelpers::submit(forecast_file = "your_file.csv",
                         first_submission = FALSE)
```

## Post submission

### Processing

After submission, our servers will process uploaded files by converting to a parquet format on our public s3 storage. A `pub_datetime` column will be added that denotes when a forecast was submitted.

### Evaluation

All forecasts are scored daily using new data until the full horizon of the forecast has been scored. Forecasts are scored using the `crps` and `logs` functions in the [`scoringRules`](https://cran.r-project.org/web/packages/scoringRules/index.html) R package. 

### Comparsion

Forecast performance can be compared to the performance of baseline models.  We are automatically submitting the following baseline models:

- `climatology`: the normal distribution (mean and standard deviation) of that day-of-year in the historical observations
- `persistenceRW`: a random walk model that assumes no change in the mean behavior.  The random walk is initialized using the most resent observation.

Our [forecast performance](performance.qmd#performance) page includes evaluations of all submitted models.

### Catalog

Information for accessing the forecasts and scores can be found on our [forecast catalog](catalog.qmd#sec-spatiotemporal-asset-catalog) page. 
