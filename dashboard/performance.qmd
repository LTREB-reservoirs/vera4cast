---
title: "Forecast performance"
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
```

```{r setup}
library(ggiraph)
library(dplyr)
library(ggplot2)
library(glue)
source("R/plot-utils.R")
#source("../R/ignore_sigpipes.R")
#ignore_sigpipe()


```

This page visualizes the forecasts and forecast performance for the focal target variables.

## Most recent forecasts {#sec-performance}

```{r}
cutoff <- as.character(Sys.Date() - 30)
combined <- arrow::open_dataset("../cache/duration=P1D") |> 
  filter(date >= cutoff) |> collect()




config <- yaml::read_yaml("../challenge_configuration.yaml")
sites <- readr::read_csv(paste0("../", config$site_table), show_col_types = FALSE)

df <- combined |> 
  left_join(sites, by = "site_id") |> 
  filter(site_id %in% sites$site_id) |> 
  mutate(reference_datetime = lubridate::as_datetime(reference_datetime),
         datetime = lubridate::as_datetime(datetime)) |> 
  collect()

reference_date <- max(lubridate::as_date(df$reference_datetime))
```

Forecasts submitted on `r reference_date`

::: panel-tabset

### Chlorophyll-a

```{r}

if("Chla_ugL_mean" %in% unique(df$variable)){
df |> 
  filter(lubridate::as_date(reference_datetime) > max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
        lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("Chla_ugL_mean"),
         ((depth_m == 1.6 & site_id == "fcre") | (depth_m == 1.5 & site_id == "bvre"))) |> 
  forecast_plots()
}
```

### Chlorophyll-a bloom probability

```{r}

if("Bloom_binary_mean" %in% unique(df$variable)){
  
ggobj_df <- df |> 
  filter(lubridate::as_date(reference_datetime) == max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
        lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("Bloom_binary_mean"),
         ((depth_m == 1.6 & site_id == "fcre") | (depth_m == 1.5 & site_id == "bvre")))
  
if(nrow(ggobj_df) > 0){

ggobj <- ggobj_df |> 
ggplot(aes(x = datetime, y = mean, color = model_id)) + 
  geom_line_interactive(aes(datetime, mean, col = model_id,
                              tooltip = model_id, data_id = model_id),
                        show.legend=FALSE) +
  facet_wrap(~site_id) +
  ylim(0,1) +
  labs(y = "Predicted probability") +
  theme_bw()

girafe(ggobj = ggobj,
         width_svg = 8, height_svg = 4,
         options = list(
           opts_hover_inv(css = "opacity:0.20;"),
           opts_hover(css = "stroke-width:2;"),
           opts_zoom(max = 4)
         ))
}
}
```

### Water temperature

```{r}
df |> 
  filter(lubridate::as_date(reference_datetime) == max(lubridate::as_date(df$reference_datetime)) - lubridate::days(2),
         variable == c("Temp_C_mean"),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime)) |>  
         #((depth_m == 1.6 & site_id == "fcre") | (depth_m == 1.5 & site_id == "bvre"))) |>  
  forecast_plots()
```

### Air temperature

```{r}
df |> 
  filter(lubridate::as_date(reference_datetime) == max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("AirTemp_C_mean")) |> 
  forecast_plots()
```

### fDOM QSU

```{r}

if("fDOM_QSU_mean" %in% unique(df$variable)){

df |> 
  filter(lubridate::as_date(reference_datetime) == max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("fDOM_QSU_mean")) |> 
  forecast_plots()
}
```

### Secchi depth

```{r}
if("Secchi_m_sample" %in% unique(df$variable)){


df |> 
  filter(lubridate::as_date(reference_datetime) == max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("Secchi_m_sample")) |> 
  forecast_plots()
  
}
```

### Ice Cover Probability

```{r}
if("IceCover_binary_sum" %in% unique(df$variable)){

df |> 
  filter(lubridate::as_date(reference_datetime) == max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("IceCover_binary_sum")) |> 
  forecast_plots()
}
```

### Dissolved methane

```{r}
if("CH4_umolL_sample" %in% unique(df$variable)){
df |> 
  filter(lubridate::as_date(reference_datetime) == max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("CH4_umolL_sample")) |> 
  forecast_plots()
}
```


### Inflow discharge

```{r}
if("Flow_cms_mean" %in% unique(df$variable)){
df |> 
  filter(lubridate::as_date(reference_datetime) == max(lubridate::as_date(df$reference_datetime)) - lubridate::days(1),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime), 
         variable == c("Flow_cms_mean")) |> 
  forecast_plots()
}
```

:::

## Forecast analysis

```{r}
sites <- combined |> distinct(site_id) |> collect() |> slice_head(n= 6) |> pull(site_id)
## with at least n observations to compare!

ref <- Sys.Date() - lubridate::days(10)

ref <- max(c(ref, 
             min(lubridate::as_date(combined$reference_datetime)),
             lubridate::as_date("2023-10-14")))

#n_data <- 10
#who <- combined |> filter(!is.na(observation)) |> summarise(has_data = max(reference_datetime)) |> collect()
#ref <- as.character ( as.Date(who$has_data[[1]]) - n_data )
ex <- combined |> 
  mutate(reference_date = lubridate::as_date(reference_datetime)) |> 
  filter(reference_date == ref, site_id %in% sites) |> collect() 

```

Below are forecasts submitted 30 days ago and include the observations used to evaluate them. Mouse over to see the team id, scroll to zoom.

::: panel-tabset

### Chlorophyll-a

```{r}
ex |> filter(variable == "Chla_ugL_mean",
            ((depth_m == 1.6 & site_id == "fcre") | 
            (depth_m == 1.5 & site_id == "bvre"))) |> forecast_plots()
```

### Water temperature

```{r}
ex |> filter(variable == "Temp_C_mean",
         (site_id == "tubr" | 
            (depth_m == 1.6 & site_id == "fcre") | 
            (depth_m == 1.5 & site_id == "bvre"))) |> 
  forecast_plots()
```

### Secchi depth

```{r}
ex |> filter(variable == "Secchi_m_sample") |> 
  forecast_plots()
```

### Air Temperature

```{r}
ex |> filter(variable == "AirTemp_C_mean") |> forecast_plots()
```
:::

## Aggregated scores

Average skill scores of each model across all sites.\

Scores are shown by reference date and forecast horizon (in days).\

Scores are averaged across all submissions of the model with a given horizon or a given `reference_datetime` using submissions made since `r cutoff`.\

::: panel-tabset
## Chlorophyll-a

```{r}
leaderboard_plots(combined, "Chla_ugL_mean")
```

## Water temperature

```{r}
leaderboard_plots(combined, "Temp_C_mean")
```

## Air temperature

```{r}
leaderboard_plots(combined, "AirTemp_C_mean")
```
:::
