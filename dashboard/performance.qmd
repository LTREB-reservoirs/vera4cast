---
title: "Forecast performance"
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
```

```{r setup}
library(ggiraph)
library(dplyr)
library(ggplot2)
library(glue)
source("R/plot-utils.R")
#source("../R/ignore_sigpipes.R")
#ignore_sigpipe()


```

This page visualizes the forecasts and forecast performance for the focal target variables.

## Most recent forecasts {#sec-performance}

```{r}

reference_datetimes <- arrow::open_dataset("../cache/summaries/duration=P1D") |> 
  dplyr::group_by(variable) |> 
  dplyr::summarize(reference_datetime_max = max(reference_datetime)) |>  
  dplyr::collect()

# reference_datetimes <- arrow::open_dataset(arrow::s3_bucket(config$summaries_bucket, endpoint_override = config$endpoint, anonymous = TRUE)) |> 
#   dplyr::filter(duration == 'P1D') |> 
#   dplyr::group_by(variable) |> 
#   dplyr::summarize(reference_datetime_max = max(reference_datetime)) |>  
#   dplyr::collect()

cutoff <- as.character(Sys.Date() - 30)


config <- yaml::read_yaml("../challenge_configuration.yaml")
sites <- readr::read_csv(paste0("../", config$site_table), show_col_types = FALSE)

df <- arrow::open_dataset("../cache/summaries/duration=P1D") |> 
  # arrow::open_dataset(arrow::s3_bucket(config$summaries_bucket, endpoint_override = config$endpoint, anonymous = TRUE)) |> 
  # dplyr::filter(duration == 'P1D') |>
  left_join(reference_datetimes, by = "variable") |> 
  filter(reference_datetime == reference_datetime_max) |> 
  left_join(sites, by = "site_id") |> 
  filter(site_id %in% sites$site_id) |> 
  mutate(reference_datetime = lubridate::as_datetime(reference_datetime),
         datetime = lubridate::as_datetime(datetime)) |> 
  filter((depth_m == 1.6 & site_id == "fcre") | (depth_m == 1.5 & site_id == "bvre") | is.na(depth_m),
         lubridate::as_date(datetime) > lubridate::as_date(reference_datetime)) |> 
  collect()

reference_date <- max(lubridate::as_date(df$reference_datetime))
```

Forecasts submitted on `r reference_date`

::: panel-tabset

### Chlorophyll-a

```{r}

if("Chla_ugL_mean" %in% unique(df$variable)){
df |> 
  filter(variable == c("Chla_ugL_mean")) |> 
    mutate(observation = as.numeric(NA)) |> 
  forecast_plots(ylabel = 'Chla (ugL)')
}
```

### Chlorophyll-a bloom probability

```{r}

if("Bloom_binary_mean" %in% unique(df$variable)){
  
ggobj_df <- df |> 
  filter(variable == c("Bloom_binary_mean")) |> 
    mutate(observation = as.numeric(NA))
  
if(nrow(ggobj_df) > 0){

ggobj <- ggobj_df |> 
ggplot(aes(x = datetime, y = mean, color = model_id)) + 
  geom_line_interactive(aes(datetime, mean, col = model_id,
                              tooltip = model_id, data_id = model_id),
                        show.legend=FALSE) +
  facet_wrap(~site_id) +
  ylim(0,1) +
  labs(y = "Predicted probability") +
  theme_bw()

girafe(ggobj = ggobj,
         width_svg = 8, height_svg = 4,
         options = list(
           opts_hover_inv(css = "opacity:0.20;"),
           opts_hover(css = "stroke-width:2;"),
           opts_zoom(max = 4)
         ))
}
}
```

### Water temperature

```{r}
df |> 
  filter(variable == c("Temp_C_mean"))  |> 
    mutate(observation = as.numeric(NA)) |> 
  forecast_plots(ylabel = 'Temp (degC)')
```

### Dissolved oxygen

```{r}
if("DO_mgL_mean" %in% unique(df$variable)){
df |> 
  filter(variable == c("DO_mgL_mean")) |> 
    mutate(observation = as.numeric(NA)) |> 
  forecast_plots(ylabel = 'DO (mgL)')
}
```

### Air temperature

```{r}
df |> 
  filter(variable == c("AirTemp_C_mean"))  |> 
    mutate(observation = as.numeric(NA)) |> 
  forecast_plots(ylabel = 'Temp (degC)')
```

### fDOM QSU

```{r}

if("fDOM_QSU_mean" %in% unique(df$variable)){

df |> 
  filter(variable == c("fDOM_QSU_mean"))  |> 
    mutate(observation = as.numeric(NA)) |> 
  forecast_plots(ylabel = 'fDOM (QSU)')
}
```

### Secchi depth

```{r}
if("Secchi_m_sample" %in% unique(df$variable)){

df |> 
  filter(variable == c("Secchi_m_sample")) |>
    filter(!model_id == 'secchi_last3obs_mean') |> ## remove KKH secchi model for now
    mutate(observation = as.numeric(NA)) |> 
  forecast_plots(ylabel = 'Secchi Depth (m)')
  
}
```

### Ice Cover Probability

# ```{r}
# if("IceCover_binary_max" %in% unique(df$variable)){
#   
#   ggobj_df <- df |> 
#   filter(variable == c("IceCover_binary_max")) |> 
#     mutate(observation = as.numeric(NA))
#   
# if(nrow(ggobj_df) > 0){
# 
# ggobj <- ggobj_df |> 
# ggplot(aes(x = datetime, y = mean, color = model_id)) + 
#   geom_line_interactive(aes(datetime, mean, col = model_id,
#                               tooltip = model_id, data_id = model_id),
#                         show.legend=FALSE) +
#   facet_wrap(~site_id) +
#   ylim(0,1) +
#   labs(y = "Predicted probability") +
#   theme_bw()
# 
# girafe(ggobj = ggobj,
#          width_svg = 8, height_svg = 4,
#          options = list(
#            opts_hover_inv(css = "opacity:0.20;"),
#            opts_hover(css = "stroke-width:2;"),
#            opts_zoom(max = 4)
#          ))
# }
# }
#```

### Dissolved methane

```{r}
if("CH4_umolL_sample" %in% unique(df$variable)){
df |> 
  filter(variable == c("CH4_umolL_sample"))  |> 
    mutate(observation = as.numeric(NA)) |> 
  forecast_plots(ylabel = 'CH4 (umolL)')
}
```

### Methane Flux
```{r}
if("CH4flux_umolm2s_mean" %in% unique(df$variable)){
df |> 
  filter(variable == c("CH4flux_umolm2s_mean"))  |> 
    dplyr::mutate(duration = ifelse(model_id == 'persistenceRW', 'P1D', duration)) |> 
    mutate(observation = as.numeric(NA)) |> 
  forecast_plots(ylabel = 'CH4 Flux (umolm2s)')
}
```

### Inflow discharge

```{r}
if("Flow_cms_mean" %in% unique(df$variable)){
df |> 
  filter(variable == c("Flow_cms_mean"))  |> 
    mutate(observation = as.numeric(NA)) |> 
  forecast_plots(ylabel = 'Flow (cms)')
}
```

:::

## Forecast analysis

```{r}
df <- arrow::open_dataset("../cache/scores/duration=P1D") |> 
  left_join(sites, by = "site_id") |> 
  filter(site_id %in% sites$site_id) |> 
  mutate(reference_datetime = lubridate::as_datetime(reference_datetime),
         datetime = lubridate::as_datetime(datetime)) |> 
  collect()

ref <- Sys.Date() - lubridate::days(30)

ref <- max(c(ref, 
             min(lubridate::as_date(df$reference_datetime)),
             lubridate::as_date("2023-10-14")))

#n_data <- 10
#who <- combined |> filter(!is.na(observation)) |> summarise(has_data = max(reference_datetime)) |> collect()
#ref <- as.character ( as.Date(who$has_data[[1]]) - n_data )
ex <- df |> 
  mutate(reference_date = lubridate::as_date(reference_datetime)) |> 
  filter(reference_date == ref,
         (depth_m == 1.6 & site_id == "fcre") | 
            (depth_m == 1.5 & site_id == "bvre") | is.na(depth_m))

```

Below are forecasts submitted 30 days ago and include the observations used to evaluate them (black points). Mouse over the figure to see the team id, and scroll to zoom.

::: panel-tabset

### Chlorophyll-a

```{r}
ex |> filter(variable == "Chla_ugL_mean") |> 
  forecast_plots(ylabel = 'Chla (ugL)')
```

### Chlorophyll-a bloom probability

```{r}
ex |> filter(variable == "Bloom_binary_mean") |> 
  forecast_plots(ylabel = 'Percent Chance of Bloom')
```

### Water temperature

```{r}
ex |> filter(variable == "Temp_C_mean") |> 
  forecast_plots(ylabel = 'Temp (degC)')
```

### Dissolved oxygen

```{r}
ex |> filter(variable == "DO_mgL_mean") |> 
  forecast_plots(ylabel = 'DO (mgL)')
```

### Secchi depth

```{r}
ex |> filter(variable == "Secchi_m_sample") |> 
      filter(!model_id == 'secchi_last3obs_mean') |> ## remove KKH secchi model for now
  forecast_plots(ylabel = 'Secchi (m)')
```

### Air Temperature

```{r}
ex |> filter(variable == "AirTemp_C_mean") |> 
  forecast_plots(ylabel = 'Temp (degC)')
```

### fDOM

```{r}
ex |> filter(variable == "fDOM_QSU_mean") |> 
  forecast_plots(ylabel = 'fDOM (QSU)')
```

### Dissolved Methane

```{r}
ex |> filter(variable == "CH4_umolL_sample") |> 
  forecast_plots(ylabel = 'CH4 (umolL)')
```

### Methane Flux
```{r}
ex |> filter(variable == "CH4flux_umolm2s_mean") |> 
  forecast_plots(ylabel = 'CH4 Flux (umolm2s)')
```

### Inflow Discharge

```{r}
ex |> filter(variable == "Flow_cms_mean") |> 
  forecast_plots(ylabel = 'Flow (cms)')
```
:::

## Aggregated scores

Average skill scores of each model are shown for each target variable, aggregated across model (top), time of year (middle), and forecast horizon (bottom). The evaluation metrics being used here are Continuous Ranked Probability Score (CRPS) and log score (logs).\

Scores are shown by reference date and forecast horizon (in days).\

Scores are averaged across all submissions of the model with a given horizon or a given `reference_datetime` using submissions made since `r cutoff`.\

::: panel-tabset
## Chlorophyll-a

```{r}
leaderboard_plots(df, "Chla_ugL_mean")
```

## Water temperature

```{r}
leaderboard_plots(df, "Temp_C_mean")
```

## Dissolved oxygen

```{r}
leaderboard_plots(df, "DO_mgL_mean")
```

## Air temperature

```{r}
leaderboard_plots(df, "AirTemp_C_mean")
```

## fDOM

```{r}
leaderboard_plots(df, "fDOM_QSU_mean")
```

## Dissolved Methane

```{r}
leaderboard_plots(df, "CH4_umolL_sample")
```

## Inflow Discharge

```{r}
leaderboard_plots(df, "Flow_cms_mean")
```
:::
